Pod

1.kubectl create namespace mynamespace
  kubectl run nginx-pod --image=nginx --namespace=mynamespace

2. yml

3.kubectl run busybox-pod --image=busybox --restart=Never -- env

4.yml

5.kubectl create namespace myns --dry-run=client -o yaml
  kubectl create namespace myns --dry-run=client -o yaml > myns-namespace.yaml

6.kubectl create resourcequota myrq --hard=cpu=1,memory=1Gi,pods=2 --dry-run=client -o yaml

7.kubectl get pods --all-namespaces

8.kubectl run nginx-pod --image=nginx --port=80

9.kubectl set image pod/nginx-pod nginx-pod=nginx:1.7.1

10. kubectl run busybox-wget --image=busybox --restart=Never -- wget -O- http://10.244.0.6

11.kubectl get pod busybox-wget -o yaml

12.kubectl describe pod busybox-wget

13.kubectl logs nom du prod

14.kubectl logs --previous nom du prod

15.kubectl exec -it nginx-pod -- /bin/sh 

16.kubectl run busybox-pod-2 --image=busybox --restart=Never -- /bin/sh -c 'echo "hello world"; exit 0'

17.

18.kubectl run nginx-pod-env --image=nginx --env="var1=val1" --restart=Never
   kubectl exec -it nginx-pod-env -- /bin/sh

19.kubectl run multi-container-pod --image=busybox --command -- sh -c 'echo hello ; sleep 3600' -- /bin/sh -c 'sleep 3600'


20.

21. kubectl run nginx1 --image=nginx --labels=app=v1
    kubectl run nginx2 --image=nginx --labels=app=v1
    kubectl run nginx3 --image=nginx --labels=app=v1
 
22.kubectl label pod nginx2 app=v2 --overwrite

23.kubectl get pods -o custom-columns=POD:.metadata.name,APP:.metadata.labels.app

24.kubectl get pods -l app=v2

25.kubectl label pods -l 'app in (v1,v2)' tier=web --overwrite

26.kubectl annotate pods -l 'app=v2' owner=marketing

27.

28.kubectl label pods --all app-

29.kubectl annotate pods nginx1 nginx2 nginx3 description='my description'

30.kubectl get pod nginx1 -o=jsonpath='{.metadata.annotations}'

31. kubectl annotate pod nginx1 nginx2 nginx3 --overwrite description-

32.kubectl delete pods nginx1 nginx2 nginx3

Placement du pod
33.

34.kubectl run pod-affinite --image=busyboxe:tag --labels=accelerator=nvidia-tesla-p100 --dry-run=client -o yaml
   kubectl apply -f pod-affinite.yaml

35.kubectl run mypod --image=myimage:mytag --restart=Never --overrides='
{
  "apiVersion": "v1",
  "spec": {
    "affinity": {
      "nodeAffinity": {
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "nodeSelectorTerms": [
            {
              "matchExpressions": [
                {
                  "key": "tier",
                  "operator": "In",
                  "values": ["frontend"]}]}]}}}}}'

36.

Deployments

37.kubectl create deployment nginx --image=nginx:1.18.0 --replicas=2 --port=80

38.kubectl get deployment nginx -o yaml

39.kubectl get replicaset 
   kubectl get replicaset nginx-584b4f6d78 -o yaml

40.kubectl get pod -l app=nginx -o yaml

41.kubectl rollout status deployment nginx

42.kubectl set image deployment/nginx nginx=nginx:1.19.8

43.kubectl rollout history deployment nginx

44.kubectl rollout undo deployment nginx

45.kubectl set image deployment/nginx nginx=nginx:1.91

46.kubectl rollout status deployment nginx

47.kubectl rollout undo deployment/nginx --to-revision=2
   kubectl get pods -l app=nginx -o=jsonpath='{.items[0].spec.containers[0].image}'

48.kubectl rollout history deployment/nginx --revision=4

49.kubectl scale deployment/nginx --replicas=5

50.kubectl autoscale deployment nginx --cpu-percent=80 --min=5 --max=10

51.*kubectl scale deployment  --replicas=0

52.kubectl set image deployment/nginx nginx=nginx:1.19.9 --record

53.

54.kubectl delete deployment nginx
   kubectl delete hpa nginx-hpa

55.creer le fichier nginx-canary-deployment.yaml
   kubectl apply -f nginx-canary.yaml

JOBS

56.kubectl create job pi --image=perl:5.34 -- perl -Mbignum=bpi -wle 'print bpi(2000)'

57.kubectl logs

58.kubectl create job myjob --image=busybox -- /bin/sh -c 'echo hello; sleep 30; echo world'

59.kubectl logs -f job/myjob

60.kubectl get jobs
   kubectl describe job/myjob
   kubectl logs job/myjob

61.kubectl delete job myjob

62.kubectl run myjob --image=busybox --restart=OnFailure -- /bin/sh -c 'echo hello; sleep 60; echo world'

63. kubectl create job myjob1 --image=busybox -- /bin/sh -c 'echo hello; sleep 60; echo world'
    for i in {1..5}; do
  kubectl create job myjob$i --from=crjob1/myjob1;done
    kubectl get job myjob1
    kubectl delete job myjob1

64.for i in {1..5}; do
  kubectl create job myjob$i --image=busybox -- /bin/sh -c 'echo hello; sleep 60; echo world' &
done

wait

kubectl get jobs

for i in {1..5}; do
  kubectl logs job/myjob$i
done

for i in {1..5}; do
  kubectl delete job myjob$i
done

65.kubectl create cronjob mycronjob --image=busybox --schedule="*/1 * * * *" -- /bin/sh -c 'date ; echo Hello from the Kubernetes cluster'

66.kubectl logs -l job-name=mycronjob

   kubectl delete cronjob mycronjob

67.kubectl create cronjob mycronjob --image=busybox --schedule="*/1 * * * *" -- /bin/sh -c 'date ; echo Hello from the Kubernetes cluster'
   kubectl get cronjob mycronjob
   kubectl get jobs --selector=cronjob-name=mycronjob
   kubectl logs job/mycronjob-28417897
   kubectl logs job/mycronjob-28417898
   kubectl delete cronjob mycronjob

68.kubectl create cronjob mycronjob --image=busybox --schedule="*/1 * * * *" --restart=OnFailure --dry-run=client -o yaml -- /bin/sh -c 'date ; echo Hello from the Kubernetes cluster ; sl
eep 17' | kubectl apply -f -

69.kubectl create cronjob mycronjob --image=busybox --schedule="*/1 * * * *" --restart=OnFailure --dry-run=client -o yaml -- /bin/sh -c 'date ; echo Hello from the Kubernetes cluster ; sleep 12' | kubectl apply -f -


70.kubectl create job myjob1 --from=cronjob/mycronjob

71.kubectl create configmap config --from-literal=foo=lala --from-literal=foo2=lolo
   kubectl apply -f configmap.yaml

72.kubectl get configmap config -o jsonpath='{.data}'

73.kubectl create configmap my-configmap --from-literal=foo=lala --from-literal=foo2=lolo

74.echo -e "foo3=lili4=lele" > config.txt

75. echo -e "VAR1=valeur1\nVAR2=valeur2" > .env 
    echo "$carte_configuration"

76.echo -e "var1=val1 this is a comment2=val2 anothercomment" > config.env    

77.echo -e "special=special" > config.env
   
78.echo -e "var3=val34=val4" > config4.txt

79.kubectl create configmap options --from-literal=var5=val5
   kubectl run nginx-pod1 --image=nginx --env="option=$(kubectl get configmap options -ojsonpath='{.data.var5}')"

80.kubectl create configmap anotherone --from-literal=var6=val6 --from-literal=var7=val7
   kubectl get configmap anotherone
   kubectl run nginx-pod-anotherone --image=nginx --env="var6=$(kubectl get configmap anotherone -ojsonpath='{.data.var6}')" --env="var7=$(kubectl get configmap anotherone -ojsonpath='{.data.var7}')"

81.kubectl create configmap cmvolume --from-literal=var8=val8 --from-literal=var9=val9
  cat <<EOF > nginx-pod-cmvolume.yaml
apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod-cmvolume
spec:
  containers:
  - name: nginx-container
    image: nginx:latest
    env:
    - name: VAR8
      valueFrom:
        configMapKeyRef:
          name: cmvolume
          key: var8
    - name: VAR9
      valueFrom:
        configMapKeyRef:
          name: cmvolume
          key: var9
    volumeMounts:
    - name: config-volume
      mountPath: "/etc/lala"
  volumes:
  - name: config-volume
    configMap:
      name: cmvolume
EOF
   kubectl exec -it nginx-pod-cmvolume -- ls /etc/lala 

SecurityContext

82.echo -e "apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-user-id\nspec:\n  containers:\n  - name: nginx-container\n    image: nginx:latest\n    securityContext:\n      runAsUser: 101" > nginx-pod-user-id.yaml

83.echo -e "apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-user-id\nspec:\n  containers:\n  - name: nginx-container\n    image: nginx:latest\n    securityContext:\n      runAsUser: 101" > nginx-pod-user-id.yaml

Demandes de ressources et limites

84.echo -e "apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-resources\nspec:\n  containers:\n  - name: nginx-container\n    image: nginx:latest\n    resources:\n      requests:\n        memory: \"256Mi\"\n        cpu: \"100m\"\n      limits:\n        memory: \"512Mi\"\n        cpu: \"200m\"" > nginx-pod-resources.yaml

Gamme de limites

85.echo -e "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: limitrange\n\n---\n\napiVersion: v1\nkind: LimitRange\nmetadata:\n  name: mem-limitrange\n  namespace: limitrange\nspec:\n  limits:\n  - type: Container\n    default:\n      memory: 200Mi\n    defaultRequest:\n      memory: 100Mi\n    max:\n      memory: 500Mi\n    min:\n      memory: 100Mi" > limitrange-namespace.yaml

86.kubectl describe namespace limitrange

87.echo -e "apiVersion: v1\nkind: Pod\nmetadata:\n  name: nginx-pod-limitrange\n  namespace: limitrange\nspec:\n  containers:\n  - name: nginx-container\n    image: nginx:latest\n    resources:\n      requests:\n        memory: \"150Mi\"" > nginx-pod-limitrange.yaml

Quotas de ressources

88.echo -e "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: namespace1" > namespace1.yaml

89.echo -e "apiVersion: v1\nkind: Namespace\nmetadata:\n  name: one" > one-namespace.yaml

90.echo -e "apiVersion: v1\nkind: Pod\nmetadata:\n  name: sample-pod\n  namespace: un\nspec:\n  containers:\n  - name: nginx-container\n    image: nginx:latest\n    resources:\n      requests:\n        memory: \"1Gi\"\n        cpu: \"0.5\"\n      limits:\n        memory: \"2Gi\"\n        cpu: \"1\"" > sample-pod-un.yaml

kubectl apply -f sample-pod-un.yaml


Secrets

91.kubectl create secret generic mysecret --from-literal=password=mypas

92.creer le fichier secret.txt qui contient
   username=mysecret1
   password=mypass1
   
   -kubectl create secret generic mysecret2 --from-file=secret.txt

93.echo -n admin > username

94.kubectl get secret mysecret2

95.kubectl run nginx-pod-secret --image=nginx --restart=Never --dry-run=client -o yaml --command -- sleep infinity |
  sed '/spec:/a\  volumes:\n  - name: secret-volume\n    secret:\n      secretName: mysecret2\n  containers:\n    - name: nginx-container\n      volumeMounts:\n      - name: secret-volume\n        mountPath: /etc/foo' > nginx-pod-secret.yaml
  kubectl apply -f nginx-pod-secret.yaml

96.kubectl delete pod nginx-pod-secret
   kubectl run nginx-pod-username --image=nginx --restart=Never --dry-run=client -o yaml --command |
  sed '/spec:/a\  containers:\n    - name: nginx-container\n      env:\n      - name: USERNAME\n        valueFrom:\n          secretKeyRef:\n            name: mysecret2\n            key: username' > nginx-pod-username.yaml
   
  kubectl apply -f nginx-pod-username.yaml

97.kubectl create namespace secret-ops
   kubectl create secret generic ext-service-secret --namespace=secret-ops --from-literal=API_KEY=LmLHbYhsgWZwNifiqaRorH8T
 
98.kubectl run consumer --image=nginx --namespace=secret-ops --restart=Never --dry-run=client -o yaml --command -- sleep infinity |
   sed '/spec:/a\  containers:\n    - name: nginx-container\n      envFrom:\n      - secretRef:\n          name: ext-service-secret' > consumer-pod.yaml 
   kubectl apply -f consumer-pod.yaml
   kubectl exec -it consumer --namespace=secret-ops -- /bin/sh
   printenv


99.kubectl create secret generic my-secret --namespace=secret-ops --type=kubernetes.io/ssh-auth --from-file=ssh-privatekey=id_rsa

100.kubectl run consumer --image=nginx --namespace=secret-ops --restart=Never --dry-run=client -o yaml --command |
  sed '/spec:/a\  containers:\n    - name: nginx-container\n      volumeMounts:\n      - name: secret-volume\n        mountPath: /var/app\n        readOnly: true' |
  sed '/spec:/a\  volumes:\n  - name: secret-volume\n    secret:\n      secretName: my-secret' > consumer-pod-secret-volume.yaml

  kubectl apply -f consumer-pod-secret-volume.yaml
  kubectl exec -it consumer --namespace=secret-ops -- /bin/sh
  
Sercive Accounts

101.kubectl get serviceaccounts --all-namespaces

102.kubectl create serviceaccount myuser

103. nginx-pod.yml
     apiVersion: v1
kind: Pod
metadata:
  name: nginx-pod
spec:
  serviceAccountName: myuser
  containers:
  - name: nginx-container
    image: nginx:latest

kubectl apply -f nginx-pod.yml

104.kubectl create jeton myuser-clusterrole --clusterrole=cluster-admin --serviceaccount=default:myuser

